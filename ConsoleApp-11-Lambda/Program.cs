namespace ConsoleApp_11_Lambda
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

            // 删选偶数
            List<int> evenNumbers = numbers.FindAll(x => x % 2 == 0);

            foreach(int number in evenNumbers)
            {
                Console.WriteLine(number);
            }
        }
    }
}

//委托（Delegates）和Lambda 表达式是两个不同的概念，但它们在C#中通常一起使用，因为它们可以互补，用于实现许多相同的目标。下面是委托和Lambda 表达式之间的一些关键区别：

//1. **定义**：
//   - **委托**是一种类型，用于封装方法，允许您将方法视为第一类公民，即它可以分配给变量、传递给其他方法作为参数等。委托定义了方法的签名，允许您创建对应签名的委托实例。
//   - **Lambda 表达式**是一种匿名函数，它允许您编写短小的、一次性的方法，通常用于简化委托的使用，尤其是在LINQ查询和事件处理中。

//2. **用途**：
//   - **委托**通常用于创建、存储和传递方法引用，以实现回调、动态方法调用等需求。它们可以用于将方法传递给其他方法，实现事件处理，以及在运行时选择要调用的方法。
//   - **Lambda 表达式**通常用于创建匿名方法，通常在不需要多次重用的简单场景中使用，例如对集合进行筛选、映射、排序等。

//3. **语法**：
//   - **委托**的语法相对较繁琐，需要明确定义委托类型、创建委托实例，然后将方法分配给委托。
//   - **Lambda 表达式**提供了一种更简洁的方式来定义匿名方法，通常以 `(参数) => 表达式` 的形式编写。

//4. **复杂性**：
//   - **委托**通常用于更复杂的情况，其中需要多次重用方法引用，以及在运行时动态选择方法。
//   - **Lambda 表达式**通常用于相对简单的、一次性的操作，例如集合操作。

//5. **示例**：
//   - **委托示例**（前面的示例）：
//     ```csharp
//     delegate int BinaryOperation(int a, int b);
//BinaryOperation add = calculator.Add;
//     ```
//   -**Lambda 表达式示例 * *（前面的示例）：
//     ```csharp
//     Func<int, int, int> add = (a, b) => a + b;
//     ```

//综上所述，委托是一种更通用的机制，用于处理方法引用和动态方法调用，而Lambda 表达式是一种用于编写匿名方法的简洁语法，通常在特定场景下更为常见。它们可以相互结合使用，以提高代码的清晰度和灵活性。